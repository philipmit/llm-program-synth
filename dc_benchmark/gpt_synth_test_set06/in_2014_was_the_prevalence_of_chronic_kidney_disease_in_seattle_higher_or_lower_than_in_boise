#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Seattle higher or lower than in Boise?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Seattle'
city2='Boise'

##### collect data from Data Commons
import requests
import json
def get_data(city):
    query=variable_text+' in '+city
    url = f"https://datacommons.org/api/explore/detect?q={query}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contextHistory": [],
        "dc": ""
    }
    response = requests.post(url, headers=headers, json=data)
    res_data = json.loads(response.text)
    entity = res_data['entities'][0]
    variable = res_data['variables'][0]
    url = "https://api.datacommons.org/v2/observation"
    params = {
    "key": API_KEY,
    "entity.dcids": entity, 
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    return response.text

city1_data = get_data(city1)
city2_data = get_data(city2)
print('city1_data')
print(city1_data)
print('city2_data')
print(city2_data)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
def extract_data(city_data, time):
    obs_data = json.loads(city_data)
    variable = list(obs_data["byVariable"].keys())[0]
    entity = list(obs_data["byVariable"][variable]["byEntity"].keys())[0]
    entity_data = obs_data["byVariable"][variable]["byEntity"][entity]
    seq_data = entity_data["orderedFacets"][0]['observations']
    seq_data_in_time=[x for x in seq_data if x['date'] == time]
    return seq_data_in_time

city1_data_in_time = extract_data(city1_data, time)
city2_data_in_time = extract_data(city2_data, time)
print('city1_data_in_time')
print(city1_data_in_time)
print('city2_data_in_time')
print(city2_data_in_time)
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### compare the values between the two cities at the specified time
city1_value = city1_data_in_time[0]['value']
city2_value = city2_data_in_time[0]['value']
print('city1_value')
print(city1_value)
print('city2_value')
print(city2_value)

##### the answer options are 'higher' or 'lower'
if city1_value > city2_value:
    natural_language_answer = 'higher'
else:
    natural_language_answer = 'lower'
print('The prevalence of chronic kidney disease in Seattle was', natural_language_answer, 'than in Boise in 2014.')
#</Analysis>
#<Visualize>
print('********** Create visualization that demonstrates the answer to the question in the prompt')
import matplotlib.pyplot as plt
import numpy as np

cities = [city1, city2]
values = [city1_value, city2_value]

plt.figure(figsize=(6, 4))
plt.bar(cities, values, color=['blue', 'green'])
plt.title(question+ '\nAnswer: The prevalence in Seattle was ' + natural_language_answer + ' than in Boise.')
plt.xlabel("Cities")
plt.ylabel(variable_text.capitalize())
plt.ylim(0, max(values)+0.5)
plt.show()
#</Visualize>
