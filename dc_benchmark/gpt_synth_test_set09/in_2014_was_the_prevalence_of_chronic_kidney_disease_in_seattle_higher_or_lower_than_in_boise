#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Seattle higher or lower than in Boise?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Seattle'
city2='Boise'


##### collect data from Data Commons for the first city
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, # e.g. "country/USA",
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response1 = requests.get(url, params=params)
print('response1.text')
print(response1.text)

##### collect data from Data Commons for the second city
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity2, # e.g. "country/USA",
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response2 = requests.get(url, params=params)
print('response2.text')
print(response2.text)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data1 = json.loads(response1.text)
print('obs_data1')
print(obs_data1)
entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
print('entity_data1')
print(entity_data1)
print('type(entity_data1)')
print(type(entity_data1))
seq_data1 = entity_data1["orderedFacets"][0]['observations']
print('seq_data1')
print(seq_data1)
print('type(seq_data1)')
print(type(seq_data1))
print('len(seq_data1)')
print(len(seq_data1))

obs_data2 = json.loads(response2.text)
print('obs_data2')
print(obs_data2)
entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
print('entity_data2')
print(entity_data2)
print('type(entity_data2)')
print(type(entity_data2))
seq_data2 = entity_data2["orderedFacets"][0]['observations']
print('seq_data2')
print(seq_data2)
print('type(seq_data2)')
print(type(seq_data2))
print('len(seq_data2)')
print(len(seq_data2))
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the timeframe specified in the prompt
seq_data1_in_time=[x for x in seq_data1 if x['date'] == time]
print('seq_data1_in_time')
print(seq_data1_in_time)
seq_data2_in_time=[x for x in seq_data2 if x['date'] == time]
print('seq_data2_in_time')
print(seq_data2_in_time)

##### compare the data for the two cities
value1 = seq_data1_in_time[0]['value'] if seq_data1_in_time else None
value2 = seq_data2_in_time[0]['value'] if seq_data2_in_time else None
print('value1')
print(value1)
print('value2')
print(value2)

##### the answer options are 'higher' or 'lower'
if value1 is not None and value2 is not None:
    if value1 > value2:
        natural_language_answer = 'higher'
    else:
        natural_language_answer = 'lower'
else:
    natural_language_answer = 'Data not available for comparison'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np

print('********** Create visualization that demonstrates the answer to the question in the prompt')
year = [int(time)]
city1_values = [value1] 
city2_values = [value2]

fig, ax = plt.subplots()
bar_width = 0.35
opacity = 0.8

bar1 = plt.bar(year, city1_values, bar_width,
alpha=opacity,
color='b',
label=city1)

bar2 = plt.bar(np.array(year) + bar_width, city2_values, bar_width,
alpha=opacity,
color='g',
label=city2)

plt.xlabel('Year')
plt.ylabel(variable_text.capitalize())
plt.title(variable_text.capitalize()+' in '+city1+' vs '+city2+' in '+time)
plt.xticks(np.array(year) + bar_width/2, ('2014'))
plt.legend()

plt.tight_layout()
plt.show()
#</Visualize>
