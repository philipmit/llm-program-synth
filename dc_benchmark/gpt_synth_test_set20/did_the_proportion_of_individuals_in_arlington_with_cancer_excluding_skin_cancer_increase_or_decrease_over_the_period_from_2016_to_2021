#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Did the proportion of individuals in Arlington with cancer, excluding skin cancer, increase or decrease over the period from 2016 to 2021?'
variable_text='the proportion of individuals with cancer, excluding skin cancer'
time1='2016'
time2='2021'
city='Arlington'


##### collect data from Data Commons
import requests
import json
query=variable_text+' in '+city
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
URL1_with_query=URL1+query
response = requests.post(URL1_with_query, headers=headers, json=data)
res_data = json.loads(response.text)
entity = res_data['entities'][0]
for variable_i in res_data['variables']:
    if 'dc/' in variable_i:
        continue
    else:
        variable = variable_i
        break
params = {
"key": API_KEY,
"entity.dcids": entity, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(URL2, params=params)
print('response.text')
print(response.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data = json.loads(response.text)
print('obs_data')
print(obs_data)
entity_data = obs_data["byVariable"][variable]["byEntity"][entity]
print('entity_data')
print(entity_data)
print('type(entity_data)')
print(type(entity_data))
seq_data = entity_data["orderedFacets"][0]['observations']
print('seq_data')
print(seq_data)
print('type(seq_data)')
print(type(seq_data))
print('len(seq_data)')
print(len(seq_data))
#</PrepData>
#<Analysis>
from scipy import stats
import matplotlib.pyplot as plt
import numpy as np

print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the timeframe specified in the prompt
seq_data_in_timeframe=[x for x in seq_data if int(x['date']) >= int(time1) and int(x['date']) <= int(time2)]
print('seq_data_in_timeframe')
print(seq_data_in_timeframe)
print('len(seq_data_in_timeframe)')
print(len(seq_data_in_timeframe))
X=[int(x['date']) for x in seq_data_in_timeframe]
print('X')
print(X)
y=[x['value'] for x in seq_data_in_timeframe]
print('y')
print(y)
slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
print('slope')
print(slope)
##### the answer options are 'increasing' or 'decreasing'
if slope>0:
    natural_language_answer='increasing'
else:
    natural_language_answer='decreasing'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np

print('********** Create visualization that demonstrates the answer to the question in the prompt')
plt.figure(figsize=(10, 6))
plt.scatter(X, y, label=variable_text.capitalize(), color="navy")
plt.plot(X, intercept + slope * np.array(X), color="darkred", label="Trend line")
plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

##### print the answer with natural language
print('Based on the data from', time1, 'to', time2, ', the', variable_text, 'in', city, 'was', natural_language_answer, '.')
#</Visualize>
