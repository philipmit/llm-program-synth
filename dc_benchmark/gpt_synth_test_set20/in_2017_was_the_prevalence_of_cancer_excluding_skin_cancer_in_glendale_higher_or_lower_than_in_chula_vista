#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2017, was the prevalence of cancer, excluding skin cancer, in Glendale higher or lower than in Chula Vista?'
variable_text='the prevalence of cancer, excluding skin cancer'
time='2017'
city1='Glendale'
city2='Chula Vista'


##### collect data from Data Commons
import requests
import json
query1=variable_text+' in '+city1
query2=variable_text+' in '+city2
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}

URL1_with_query1=URL1+query1
URL1_with_query2=URL1+query2
###### data collection for city1
response1 = requests.post(URL1_with_query1, headers=headers, json=data)
res_data1 = json.loads(response1.text)
entity1 = res_data1['entities'][0]
for variable_i1 in res_data1['variables']:
    if 'dc/' in variable_i1:
        continue
    else:
        variable1 = variable_i1
        break
params1 = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable1
}
response1 = requests.get(URL2, params=params1)
print('response1.text')
print(response1.text)
###### data collection for city2
response2 = requests.post(URL1_with_query2, headers=headers, json=data)
res_data2 = json.loads(response2.text)
entity2 = res_data2['entities'][0]
for variable_i2 in res_data2['variables']:
    if 'dc/' in variable_i2:
        continue
    else:
        variable2 = variable_i2
        break
params2 = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable2
}
response2 = requests.get(URL2, params=params2)
print('response2.text')
print(response2.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response for city1
obs_data1 = json.loads(response1.text)
entity_data1 = obs_data1["byVariable"][variable1]["byEntity"][entity1]
seq_data1 = entity_data1["orderedFacets"][0]['observations']
print('seq_data1')
print(seq_data1)

##### extract the data from the response for city2
obs_data2 = json.loads(response2.text)
entity_data2 = obs_data2["byVariable"][variable2]["byEntity"][entity2]
seq_data2 = entity_data2["orderedFacets"][0]['observations']
print('seq_data2')
print(seq_data2)
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data for the year specified in the prompt for city1
seq_data1_in_time=[x for x in seq_data1 if int(x['date']) == int(time)]
value_in_time1=seq_data1_in_time[0]['value']

##### extract data for the year specified in the prompt for city2
seq_data2_in_time=[x for x in seq_data2 if int(x['date']) == int(time)]
value_in_time2=seq_data2_in_time[0]['value']

##### the answer options are 'higher' or 'lower'
if value_in_time1>value_in_time2:
    natural_language_answer='higher'
else:
    natural_language_answer='lower'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np
print('********** Create visualization that demonstrates the answer to the question in the prompt')
# data to plot
n_groups = 1
values_city1 = (value_in_time1,)
values_city2 = (value_in_time2,)

# create plot
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.8

rects1 = plt.bar(index, values_city1, bar_width, alpha=opacity, color='b', label=city1)
rects2 = plt.bar(index + bar_width, values_city2, bar_width, alpha=opacity, color='g', label=city2)

plt.xlabel('Cities')
plt.ylabel('Values')
plt.title('Values by city')
plt.xticks(index + bar_width/2, ('2017',))
plt.legend()

plt.tight_layout()
plt.show()
#</Visualize>
