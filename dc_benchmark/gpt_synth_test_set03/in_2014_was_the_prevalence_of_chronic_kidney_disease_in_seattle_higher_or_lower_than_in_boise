#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Seattle higher or lower than in Boise?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Seattle'
city2='Boise'

##### collect data for city1 from Data Commons
import requests
import json
query=variable_text+' in '+city1+' in '+time
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0] if 'entities' in res_data else None
variable = res_data['variables'][0] if 'variables' in res_data else None
if entity1 and variable:
    url = "https://api.datacommons.org/v2/observation"
    params = {
    "key": "AIzaSyDZ7TUirJBt2BSVf7jNuPpk29XzvAeeONI",
    "entity.dcids": entity1, # e.g. "country/USA",
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    obs_data_city1 = json.loads(response.text)
    print('response.text for city1')
    print(response.text)
else: 
    print(f"Entity1 or variable not found for {city1}")

##### collect data for city2 from Data Commons
query=variable_text+' in '+city2+' in '+time
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0] if 'entities' in res_data else None
if entity2 and variable:
    url = "https://api.datacommons.org/v2/observation"
    params = {
    "key": "AIzaSyDZ7TUirJBt2BSVf7jNuPpk29XzvAeeONI",
    "entity.dcids": entity2, # e.g. "country/USA",
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    obs_data_city2 = json.loads(response.text)
    print('response.text for city2')
    print(response.text)
else: 
    print(f"Entity2 or variable not found for {city2}")
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis')
##### extract the data from the response for city1
if "byVariable" in obs_data_city1 and variable in obs_data_city1["byVariable"] and "byEntity" in obs_data_city1["byVariable"][variable] and entity1 in obs_data_city1["byVariable"][variable]["byEntity"]:
    entity_data_city1 = obs_data_city1["byVariable"][variable]["byEntity"][entity1]
    print('entity_data_city1')
    print(entity_data_city1)
    seq_data_city1 = entity_data_city1["orderedFacets"][0]['observations']
    print('seq_data_city1')
    print(seq_data_city1)
else:
    print(f"No data found for {city1} in the specified time frame")

##### extract the data from the response for city2
if "byVariable" in obs_data_city2 and variable in obs_data_city2["byVariable"] and "byEntity" in obs_data_city2["byVariable"][variable] and entity2 in obs_data_city2["byVariable"][variable]["byEntity"]:
    entity_data_city2 = obs_data_city2["byVariable"][variable]["byEntity"][entity2]
    print('entity_data_city2')
    print(entity_data_city2)
    seq_data_city2 = entity_data_city2["orderedFacets"][0]['observations']
    print('seq_data_city2')
    print(seq_data_city2)
else:
    print(f"No data found for {city2} in the specified time frame")
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data for the specified year
seq_data_city1_in_time=[x for x in seq_data_city1 if x['date'] == time]
print('seq_data_city1_in_time')
print(seq_data_city1_in_time)
seq_data_city2_in_time=[x for x in seq_data_city2 if x['date'] == time]
print('seq_data_city2_in_time')
print(seq_data_city2_in_time)

if seq_data_city1_in_time and seq_data_city2_in_time:
    value_city1 = seq_data_city1_in_time[0]['value']
    value_city2 = seq_data_city2_in_time[0]['value']
    print('value_city1')
    print(value_city1)
    print('value_city2')
    print(value_city2)

    ##### the answer options are 'higher' or 'lower'
    if value_city1 > value_city2:
        natural_language_answer=city1+' had a higher '+variable_text+' than '+city2+' in '+time
    else:
        natural_language_answer=city1+' had a lower '+variable_text+' than '+city2+' in '+time
else:
    natural_language_answer='Data not available for comparison.'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
print('********** Create visualization that demonstrates the answer to the question in the prompt')
values = [value_city1, value_city2]
cities = [city1, city2]
plt.figure(figsize=(8,5))
plt.bar(cities, values, color=['blue', 'orange'])
plt.title('Prevalence of Chronic Kidney Disease in '+city1+' and '+city2+' in '+time)
plt.xlabel('City')
plt.ylabel('Prevalence (%)')
plt.ylim([0, max(values)+1])
for i in range(len(values)):
    plt.text(i, values[i]+0.2, round(values[i],2), ha = 'center')
plt.show()
#</Visualize>
