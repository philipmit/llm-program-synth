#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Seattle higher or lower than in Boise?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Seattle'
city2='Boise'


##### collect data from Data Commons for both cities
import requests
import json

def get_data(city):
    query=variable_text+' in '+city
    url = f"https://datacommons.org/api/explore/detect?q={query}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contextHistory": [],
        "dc": ""
    }
    response = requests.post(url, headers=headers, json=data)
    res_data = json.loads(response.text)
    entity = res_data['entities'][0]
    variable = res_data['variables'][0]
    url = "https://api.datacommons.org/v2/observation"
    params = {
    "key": API_KEY,
    "entity.dcids": entity, # e.g. "country/USA",
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    print(response.text)
    return json.loads(response.text)

city1_data = get_data(city1)
city2_data = get_data(city2)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis')
##### extract the data from the response
def get_value(data, time):
    obs_data = data
    variable = list(obs_data["byVariable"].keys())[0]
    entity = list(obs_data["byVariable"][variable]["byEntity"].keys())[0]
    entity_data = obs_data["byVariable"][variable]["byEntity"][entity]
    seq_data = entity_data["orderedFacets"][0]['observations']
    seq_data_in_timeframe=[x for x in seq_data if x['date'] == time]
    return seq_data_in_timeframe[0]['value']

value_city1 = get_value(city1_data, time)
value_city2 = get_value(city2_data, time)
print('value_city1:', value_city1)
print('value_city2:', value_city2)
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### the answer options are 'higher' or 'lower'
if value_city1 > value_city2:
    natural_language_answer='higher'
else:
    natural_language_answer='lower'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
print('********** Create visualization that demonstrates the answer to the question in the prompt')
data = {city1: value_city1, city2: value_city2}
plt.figure(figsize=(10, 6))
plt.bar(data.keys(), data.values(), color=['navy', 'darkred'])
plt.title(question+'\nAnswer: The prevalence in '+city1+' was '+natural_language_answer+' than in '+city2)
plt.xlabel("City")
plt.ylabel(variable_text.capitalize())
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
#</Visualize>
