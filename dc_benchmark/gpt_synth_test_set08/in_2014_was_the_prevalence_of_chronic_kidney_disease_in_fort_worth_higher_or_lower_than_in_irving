#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Fort Worth higher or lower than in Irving?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Fort Worth'
city2='Irving'


##### collect data from Data Commons for the first city
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response1 = requests.get(url, params=params)
print('response1.text')
print(response1.text)


##### collect data from Data Commons for the second city
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response2 = requests.get(url, params=params)
print('response2.text')
print(response2.text)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data_city1 = json.loads(response1.text)
print('obs_data_city1')
print(obs_data_city1)
entity_data_city1 = obs_data_city1["byVariable"][variable]["byEntity"][entity1]
print('entity_data_city1')
print(entity_data_city1)
print('type(entity_data_city1)')
print(type(entity_data_city1))
seq_data_city1 = entity_data_city1["orderedFacets"][0]['observations']
print('seq_data_city1')
print(seq_data_city1)
print('type(seq_data_city1)')
print(type(seq_data_city1))
print('len(seq_data_city1)')
print(len(seq_data_city1))

##### extract data for the second city
obs_data_city2 = json.loads(response2.text)
print('obs_data_city2')
print(obs_data_city2)
entity_data_city2 = obs_data_city2["byVariable"][variable]["byEntity"][entity2]
print('entity_data_city2')
print(entity_data_city2)
print('type(entity_data_city2)')
print(type(entity_data_city2))
seq_data_city2 = entity_data_city2["orderedFacets"][0]['observations']
print('seq_data_city2')
print(seq_data_city2)
print('type(seq_data_city2)')
print(type(seq_data_city2))
print('len(seq_data_city2)')
print(len(seq_data_city2))
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data for the specified time
seq_data_city1_time=[x for x in seq_data_city1 if x['date'] == time]
print('seq_data_city1_time')
print(seq_data_city1_time)
seq_data_city2_time=[x for x in seq_data_city2 if x['date'] == time]
print('seq_data_city2_time')
print(seq_data_city2_time)

value_city1 = seq_data_city1_time[0]['value'] if seq_data_city1_time else None
value_city2 = seq_data_city2_time[0]['value'] if seq_data_city2_time else None
print('value_city1')
print(value_city1)
print('value_city2')
print(value_city2)

##### the answer options are 'higher' or 'lower'
if value_city1 and value_city2: # both cities have data for the specified time
    if value_city1 > value_city2:
        natural_language_answer = f'{city1} was higher than {city2}'
    elif value_city1 < value_city2:
        natural_language_answer = f'{city1} was lower than {city2}'
    else:
        natural_language_answer = f'{city1} and {city2} were equal'
elif value_city1: # only the first city has data for the specified time
    natural_language_answer = f'Only {city1} has data for {time}. The value was {value_city1}.'
elif value_city2: # only the second city has data for the specified time
    natural_language_answer = f'Only {city2} has data for {time}. The value was {value_city2}.'
else: # neither city has data for the specified time
    natural_language_answer = f'Neither {city1} nor {city2} has data for {time}.'

print(natural_language_answer)
#</Analysis>
#<Visualize>
print('********** Create visualization that demonstrates the answer to the question in the prompt')
import matplotlib.pyplot as plt
import numpy as np

# Data for city1 and city2
X1 = [int(x['date']) for x in seq_data_city1]
Y1 = [x['value'] for x in seq_data_city1]
X2 = [int(x['date']) for x in seq_data_city2]
Y2 = [x['value'] for x in seq_data_city2]

# Plot data
plt.figure(figsize=(10, 6))
plt.plot(X1, Y1, label=city1, color="navy")
plt.plot(X2, Y2, label=city2, color="darkred")
plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.title(f'Comparison of {variable_text} between {city1} and {city2}')
plt.grid(True)
plt.show()
#</Visualize>
