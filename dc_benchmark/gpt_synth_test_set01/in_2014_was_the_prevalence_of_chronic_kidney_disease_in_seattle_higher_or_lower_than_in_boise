#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Seattle higher or lower than in Boise?'
variable_text='the prevalence of chronic kidney disease'
year='2014'
city1='Seattle'
city2='Boise'


##### collect data from Data Commons for City 1
import requests
import json
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response1 = requests.get(url, params=params)
print('response1.text')
print(response1.text)

##### collect data from Data Commons for City 2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
params = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response2 = requests.get(url, params=params)
print('response2.text')
print(response2.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data1 = json.loads(response1.text)
print('obs_data1')
print(obs_data1)
entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
print('entity_data1')
print(entity_data1)
print('type(entity_data1)')
print(type(entity_data1))
seq_data1 = entity_data1["orderedFacets"][0]['observations']
print('seq_data1')
print(seq_data1)
print('type(seq_data1)')
print(type(seq_data1))
print('len(seq_data1)')
print(len(seq_data1))

# Since we didn't get a valid response for city2 (Boise), we can't continue with the data preparation or analysis for city2.
# We should add error handling to the data collection code to handle such situations.
#</PrepData>
#<ErrorHandling>
print('********** Add error handling to the data collection code')
##### If the response for city2 is not a dictionary or does not contain the necessary data, print an error message.
try:
    obs_data2 = json.loads(response2.text)
    print('obs_data2')
    print(obs_data2)
    entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
    print('entity_data2')
    print(entity_data2)
    print('type(entity_data2)')
    print(type(entity_data2))
    seq_data2 = entity_data2["orderedFacets"][0]['observations']
    print('seq_data2')
    print(seq_data2)
    print('type(seq_data2)')
    print(type(seq_data2))
    print('len(seq_data2)')
    print(len(seq_data2))
except Exception as e:
    print('Error: Could not collect data for city 2. Please check the city name or try again later.')
    print(str(e))
#</ErrorHandling>

#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### If the data for both cities is available, compare the values for the specified year.
try:
    city1_value = [x['value'] for x in seq_data1 if x['date'] == year][0]
    print('city1_value')
    print(city1_value)
    city2_value = [x['value'] for x in seq_data2 if x['date'] == year][0]
    print('city2_value')
    print(city2_value)
    ##### the answer options are 'higher' or 'lower'
    if city1_value > city2_value:
        natural_language_answer = 'higher'
    else:
        natural_language_answer = 'lower'
    print(natural_language_answer)
except Exception as e:
    print('Error: Could not compare data for the two cities. Please check the year or try again later.')
    print(str(e))
#</Analysis>
