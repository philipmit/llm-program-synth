#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Is the rate of growth in the prevalence of arthritis higher in Omaha or Irvine?'
variable_text='the prevalence of arthritis'
city1='Omaha'
city2='Irvine'

##### function to fetch data
def fetch_data(city):
    query = variable_text+' in '+city
    URL1_with_query = URL1+query
    response = requests.post(URL1_with_query, headers=headers, json=data)
    res_data = json.loads(response.text)
    if not res_data['entities']:
        return None
    entity = res_data['entities'][0]
    for variable_i in res_data['variables']:
        if 'dc/' in variable_i:
            continue
        else:
            variable = variable_i
            break
    params = {
    "key": API_KEY,
    "entity.dcids": entity, 
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(URL2, params=params)
    print('response.text')
    print(response.text)
    return response.text, entity, variable

# collect data from Data Commons for city1
res1, entity1, variable1 = fetch_data(city1)
if res1 is None:
    print("No data available for city1:", city1)
# collect data from Data Commons for city2
res2, entity2, variable2 = fetch_data(city2)
if res2 is None:
    print("No data available for city2:", city2)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
# function to get individual data for analysis
def get_data_for_analysis(res,entity,variable):
    obs_data = json.loads(res)
    print('obs_data')
    print(obs_data)
    entity_data = obs_data["byVariable"][variable]["byEntity"][entity]
    print('entity_data')
    print(entity_data)
    print('type(entity_data)')
    print(type(entity_data))
    seq_data = entity_data["orderedFacets"][0]['observations']
    print('seq_data')
    print(seq_data)
    print('type(seq_data)')
    print(type(seq_data))
    print('len(seq_data)')
    print(len(seq_data))
    return seq_data

# get data for city1
if res1 is not None:
    seq_data1 = get_data_for_analysis(res1, entity1, variable1)
# get data for city2
if res2 is not None:
    seq_data2 = get_data_for_analysis(res2, entity2, variable2)
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### function to calculate slope
def calculate_slope(seq_data):
    X=[int(x['date']) for x in seq_data]
    print('X')
    print(X)
    y=[x['value'] for x in seq_data]
    print('y')
    print(y)
    slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
    print('slope')
    print(slope)
    return slope

# calculate slope for city1
if res1 is not None:
    slope1 = calculate_slope(seq_data1)
# calculate slope for city2
if res2 is not None:
    slope2 = calculate_slope(seq_data2)

##### the answer options are city1 or city2
if slope1 > slope2:
    natural_language_answer = city1
else:
    natural_language_answer = city2
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np
print('********** Create visualization that demonstrates the answer to the question in the prompt')

# function to plot data
def plot_data(seq_data, city, color):
    X=[int(x['date']) for x in seq_data]
    y=[x['value'] for x in seq_data]
    plt.scatter(X, y, label=city, color=color)
    slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
    plt.plot(X, intercept + slope * np.array(X), color=color, label="Trend line for "+city)

plt.figure(figsize=(10, 6))

# plot data for city1
if res1 is not None:
    plot_data(seq_data1, city1, "navy")
# plot data for city2
if res2 is not None:
    plot_data(seq_data2, city2, "darkred")

plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
#</Visualize>
