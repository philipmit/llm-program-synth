#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Is the rate of arthritis among people in Austin or Miami growing more quickly?'
variable_text='the rate of arthritis among people'
city1='Austin'
city2='Miami'


##### collect data from Data Commons for city1
import requests
import json
query=variable_text+' in '+city1
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
URL1_with_query=URL1+query
response = requests.post(URL1_with_query, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
for variable_i in res_data['variables']:
    if 'dc/' in variable_i:
        continue
    else:
        variable = variable_i
        break
params = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(URL2, params=params)
print('response.text')
print(response.text)


##### collect data from Data Commons for city2
query=variable_text+' in '+city2
URL1_with_query=URL1+query
response = requests.post(URL1_with_query, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
params = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(URL2, params=params)
print('response.text')
print(response.text)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response for city1
obs_data1 = json.loads(response.text)
print('obs_data1')
print(obs_data1)
if variable in obs_data1["byVariable"] and entity1 in obs_data1["byVariable"][variable]["byEntity"]:
    entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
    print('entity_data1')
    print(entity_data1)
    print('type(entity_data1)')
    print(type(entity_data1))
    seq_data1 = entity_data1["orderedFacets"][0]['observations']
    print('seq_data1')
    print(seq_data1)
    print('type(seq_data1)')
    print(type(seq_data1))
    print('len(seq_data1)')
    print(len(seq_data1))
else:
    print('No data available for city1 - Austin')
    seq_data1 = []

##### extract the data from the response for city2
obs_data2 = json.loads(response.text)
print('obs_data2')
print(obs_data2)
if variable in obs_data2["byVariable"] and entity2 in obs_data2["byVariable"][variable]["byEntity"]:
    entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
    print('entity_data2')
    print(entity_data2)
    print('type(entity_data2)')
    print(type(entity_data2))
    seq_data2 = entity_data2["orderedFacets"][0]['observations']
    print('seq_data2')
    print(seq_data2)
    print('type(seq_data2)')
    print(type(seq_data2))
    print('len(seq_data2)')
    print(len(seq_data2))
else:
    print('No data available for city2 - Miami')
    seq_data2 = []
#</PrepData>
#<Analysis>
from scipy import stats
print('********** Perform the analysis to answer the question in the prompt')
##### calculate the slope for city1
if seq_data1:
    X1=[int(x['date']) for x in seq_data1]
    print('X1')
    print(X1)
    y1=[x['value'] for x in seq_data1]
    print('y1')
    print(y1)
    slope1, intercept1, r_value1, p_value1, std_err1 = stats.linregress(X1, y1)
    print('slope1')
    print(slope1)
else:
    print('No data available for city1 - Austin')
    slope1 = None

##### calculate the slope for city2
if seq_data2:
    X2=[int(x['date']) for x in seq_data2]
    print('X2')
    print(X2)
    y2=[x['value'] for x in seq_data2]
    print('y2')
    print(y2)
    slope2, intercept2, r_value2, p_value2, std_err2 = stats.linregress(X2, y2)
    print('slope2')
    print(slope2)
else:
    print('No data available for city2 - Miami')
    slope2 = None

##### the answer options are city1 or city2
if slope1 is not None and slope2 is not None:
    if slope1>slope2:
        natural_language_answer=city1
    else:
        natural_language_answer=city2
elif slope1 is not None:
    natural_language_answer=city1
elif slope2 is not None:
    natural_language_answer=city2
else:
    natural_language_answer='No data available for both cities'
print(natural_language_answer)
#</Analysis>
