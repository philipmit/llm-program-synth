#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Fort Worth higher or lower than in Irving?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Fort Worth'
city2='Irving'


##### collect data from Data Commons for both cities
import requests
import json

#City1
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
entity_data1 = json.loads(response.text)

#City2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
entity_data2 = json.loads(response.text)
#</PrevData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract the relevant data
value1 = [x["value"] for x in entity_data1["byVariable"][variable]["byEntity"][entity1]["orderedFacets"] if 'date' in x and x['date'] == time]
value2 = [x["value"] for x in entity_data2["byVariable"][variable]["byEntity"][entity2]["orderedFacets"] if 'date' in x and x['date'] == time]
print('value1')
print(value1)
print('value2')
print(value2)


if not value1 or not value2:
    print("No data available for comparison.")
else:
    ##### the answer options are 'higher' or 'lower'
    if float(value1[0]) > float(value2[0]):
        natural_language_answer='higher'
    else:
        natural_language_answer='lower'
    print(natural_language_answer)
#</Analysis></PrepData>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np

print('********** Create visualization that demonstrates the answer to the question in the prompt')
data=[value1[0] if value1 else None, value2[0] if value2 else None]
labels = [city1, city2]
x = np.arange(len(labels))

plt.figure(figsize=(10, 6))
plt.bar(x, data, color=["navy", "darkred"])
plt.xlabel('Cities')
plt.ylabel(variable_text.capitalize())
plt.title(f'Comparison of {variable_text} in {city1} and {city2} in {time}')
plt.xticks(x, labels)
plt.show()
#</Visualize></Analysis>
