#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Fort Worth higher or lower than in Irving?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Fort Worth'
city2='Irving'


##### collect data from Data Commons for both cities
import requests
import json

#City1
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
entity_data1 = json.loads(response.text)

#City2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
entity_data2 = json.loads(response.text)
#</PrevData>

#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract the relevant data
value1 = [x["value"] for x in entity_data1["byVariable"][variable]["byEntity"][entity1]["orderedFacets"] if 'date' in x and x['date'] == time]
value2 = [x["value"] for x in entity_data2["byVariable"][variable]["byEntity"][entity2]["orderedFacets"] if 'date' in x and x['date'] == time]
print('value1')
print(value1)
print('value2')
print(value2)


if not value1 or not value2:
    print("No data available for comparison.")
else:
    ##### the answer options are 'higher' or 'lower'
    if float(value1[0]) > float(value2[0]):
        natural_language_answer='higher'
    else:
        natural_language_answer='lower'
    print(natural_language_answer)
#</Analysis>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the dataset and convert them into acceptable forms for further analysis
value1_data = [x["value"] for x in entity_data1["byVariable"][variable]["byEntity"][entity1]["orderedFacets"] if 'date' in x and x['date'] <= time] if entity_data1 else []
value2_data = [x["value"] for x in entity_data2["byVariable"][variable]["byEntity"][entity2]["orderedFacets"] if 'date' in x and x['date'] <= time] if entity_data2 else []
print('value1_data')
print(value1_data)
print('value2_data')
print(value2_data)
#</PrepData>

#<Visualize>
import matplotlib.pyplot as plt
print('********** Create visualization that demonstrates the answer to the question in the prompt')
##### plot dataset for both cities
plt.figure(figsize=(10, 6))
plt.plot(range(1,len(value1_data)+1), value1_data, marker='o', label=city1.capitalize(), color="navy")
plt.plot(range(1,len(value2_data)+1), value2_data, marker='o', label=city2.capitalize(), color="darkred")
plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid()
plt.show()
#</Visualize>
