#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Was there an increase or decrease in the percentage of individuals in Newark diagnosed with cancer, excluding skin cancer, between 2015 and 2017?'
variable_text='the percentage of individuals in Newark diagnosed with cancer'
time1='2015'
time2='2017'
city='Newark'


##### collect data from Data Commons
import requests
import json
query=variable_text+' in '+city
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity,
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
print('response.text')
print(response.text)

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data = json.loads(response.text)
print('obs_data')
print(obs_data)

if "byVariable" in obs_data and variable in obs_data["byVariable"]:
    entity_data = obs_data["byVariable"][variable]["byEntity"][entity]

    if "facets" in entity_data:     
        seq_data = entity_data["facets"][0]['observations']
    else:
        print('No observation data available')
        seq_data = []
else:
    print('No variable data available')
    entity_data = []
    seq_data = []

print('entity_data')
print(entity_data)
print('type(entity_data)')
print(type(entity_data))

print('seq_data')
print(seq_data)
print('type(seq_data)')
print(type(seq_data))
print('len(seq_data)')
print(len(seq_data))

# This is as far as we can safely go without continuing to risk further KeyErrors
# based on the availability and structure of the API data
# Continue from here with handling the possiblity of no data available as needed</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### handle case where no data returned from the API
if not seq_data:
    print(f"No data available for {variable_text} in {city} for the period from {time1} to {time2}")
else:
    ##### extract data from the timeframe specified in the prompt
    seq_data_in_timeframe=[x for x in seq_data if int(x['date']) >= int(time1) and int(x['date']) <= int(time2)]
    print('seq_data_in_timeframe')
    print(seq_data_in_timeframe)
    print('len(seq_data_in_timeframe)')
    print(len(seq_data_in_timeframe))
    X=[int(x['date']) for x in seq_data_in_timeframe]
    print('X')
    print(X)
    y=[x['value'] for x in seq_data_in_timeframe]
    print('y')
    print(y)
    slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
    print('slope')
    print(slope)
    ##### the answer options are 'increasing' or 'decreasing'
    if slope>0:
        natural_language_answer='increasing'
    else:
        natural_language_answer='decreasing'
    print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np
print('********** Create visualization that demonstrates the answer to the question in the prompt')
##### handle case where no data returned from the API
if not seq_data or not seq_data_in_timeframe:
    print(f"No data available for {variable_text} in {city} for the period from {time1} to {time2}")
else:
    plt.figure(figsize=(10, 6))
    plt.scatter(X, y, label=variable_text.capitalize(), color="navy")
    plt.plot(X, intercept + slope * np.array(X), color="darkred", label="Trend line")
    plt.xlabel("Year")
    plt.ylabel(variable_text.capitalize())
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
#</Visualize>
