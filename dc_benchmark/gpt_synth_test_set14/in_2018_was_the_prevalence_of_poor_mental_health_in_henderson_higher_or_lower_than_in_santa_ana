#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2018, was the prevalence of poor mental health in Henderson higher or lower than in Santa Ana?'
variable_text='the prevalence of poor mental health'
time='2018'
city1='Henderson'
city2='Santa Ana'

##### collect data from Data Commons
import requests
import json

def get_entity_variable_from_data_commons(query):
    url = f"https://datacommons.org/api/explore/detect?q={query}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contextHistory": [],
        "dc": ""
    }
    response = requests.post(url, headers=headers, json=data)
    res_data = json.loads(response.text)
    if 'entities' in res_data and 'variables' in res_data:
        entity = res_data['entities'][0]
        variable = res_data['variables'][0]
        return entity, variable
    else:
        return None, None

entity1, variable = get_entity_variable_from_data_commons(variable_text+' in '+city1)
entity2, _ = get_entity_variable_from_data_commons(variable_text+' in '+city2)

if not entity1 or not entity2:
    print("Error in API call to Data Commons. The Entities or Variables not found. Please check the query.")
else:
    url = "https://api.datacommons.org/data/observation"
    params1 = {
        "key": API_KEY,
        "entity.dcids": entity1,
        "select": ["date", "value"],
        "variable.dcids": variable
    }

    response = requests.get(url, params=params1)
    entity1_data = json.loads(response.text)

    params2 = {
        "key": API_KEY,
        "entity.dcids": entity2,
        "select": ["date", "value"],
        "variable.dcids": variable
    }

    response = requests.get(url, params=params2)
    entity2_data = json.loads(response.text)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis')
##### filter the data to get the data for the year and cities specified in the prompt
def get_value_for_year(observations, year):
    for idx in range(len(observations)):
        if observations[idx]['date'] == year:
            return float(observations[idx]['value'])
    return None

value_city1 = get_value_for_year(entity1_data['data'], time)
value_city2 = get_value_for_year(entity2_data['data'], time)

if value_city1 is None:
    print(f"No data for {city1} in the year {time}")
if value_city2 is None:
    print(f"No data for {city2} in the year {time}")

if value_city1 is not None and value_city2 is not None:
    print(f"{city1}: {value_city1}, {city2}: {value_city2}")
#</PrepData>
