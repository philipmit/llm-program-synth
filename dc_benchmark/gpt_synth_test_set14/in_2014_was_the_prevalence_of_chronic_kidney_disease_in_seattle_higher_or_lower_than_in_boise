#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Seattle higher or lower than in Boise?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Seattle'
city2='Boise'


##### collect data from Data Commons
import requests
import json

# collect data for city 1
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]

# collect data for city 2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]

url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": [entity1, entity2], 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
print('response.text')
print(response.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data = json.loads(response.text)
print('obs_data')
print(obs_data)
entity1_data = obs_data["byVariable"][variable]["byEntity"][entity1]
entity2_data = obs_data["byVariable"][variable]["byEntity"][entity2]
print('entity1_data')
print(entity1_data)
print('entity2_data')
print(entity2_data)
print('type(entity1_data)')
print(type(entity1_data))
seq1_data = entity1_data["orderedFacets"][0]['observations']
seq2_data = entity2_data["orderedFacets"][0]['observations']
print('seq1_data')
print(seq1_data)
print('seq2_data')
print(seq2_data)
print('type(seq1_data)')
print(type(seq1_data))
print('type(seq2_data)')
print(type(seq2_data))
print('len(seq1_data)')
print(len(seq1_data))
print('len(seq2_data)')
print(len(seq2_data))
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the specific year specified in the prompt
seq1_data_in_time=[x for x in seq1_data if x['date'] == time]
seq2_data_in_time=[x for x in seq2_data if x['date'] == time]
print('seq1_data_in_time')
print(seq1_data_in_time)
print('seq2_data_in_time')
print(seq2_data_in_time)
value_city1 = seq1_data_in_time[0]['value'] if len(seq1_data_in_time) > 0 else None
value_city2 = seq2_data_in_time[0]['value'] if len(seq2_data_in_time) > 0 else None
print('value_city1')
print(value_city1)
print('value_city2')
print(value_city2)
##### the answer options are 'higher' or 'lower'
if value_city1 is not None and value_city2 is not None:
    if value_city1 > value_city2:
        natural_language_answer='higher'
    else:
        natural_language_answer='lower'
else:
    natural_language_answer = "Data not available for one or both cities in the specified year."
print(natural_language_answer)
#</Analysis>
#<Visualize>
print('********** Create visualization that demonstrates the answer to the question in the prompt')
import matplotlib.pyplot as plt
import numpy as np
plt.figure(figsize=(10, 6))
X=[int(x['date']) for x in seq1_data]
y=[x['value'] for x in seq1_data]
plt.scatter(X, y, label=city1+" "+variable_text.capitalize(), color="blue")
X=[int(x['date']) for x in seq2_data]
y=[x['value'] for x in seq2_data]
plt.scatter(X, y, label=city2+" "+variable_text.capitalize(), color="green")
plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
#</Visualize>
