#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Is the rate of growth in the prevalence of arthritis higher in Omaha or Irvine?'
variable_text='the prevalence of arthritis'
city1='Omaha'
city2='Irvine'

##### collect data from Data Commons for both cities
cities = [city1, city2]
slope_values = {}

for city in cities:
    query = variable_text + ' in ' + city
    url = f"https://datacommons.org/api/explore/detect?q={query}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contextHistory": [],
        "dc": ""
    }
    response = requests.post(url, headers=headers, json=data)
    res_data = json.loads(response.text)
    entity = res_data['entities'][0]
    variable = res_data['variables'][0]

    url = "https://api.datacommons.org/v2/observation"
    params = {
        "key": API_KEY,
        "entity.dcids": entity,
        "select": ["entity", "variable", "value", "date"],
        "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    print(response.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data_city1 = json.loads(response.text)
obs_data_city2 = json.loads(response.text)
print('obs_data_city1 and obs_data_city2')
print(obs_data_city1,"\n", obs_data_city2)

entity_data_city1 = obs_data_city1["byVariable"][variable]["byEntity"][entity]
entity_data_city2 = obs_data_city2["byVariable"][variable]["byEntity"][entity]

print('entity_data for City1 and City2')
print(entity_data_city1,"\n",entity_data_city2 )

seq_data_city1 = entity_data_city1["orderedFacets"][0]['observations']
seq_data_city2 = entity_data_city2["orderedFacets"][0]['observations']

print('Sequential data City1 and City2')
print(seq_data_city1,"\n",seq_data_city2)
print('len(seq_data_city1) and len(seq_data_city2)')
print(len(seq_data_city1), len(seq_data_city2))
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### calculate slope for each city
for seq_data, city in zip([seq_data_city1, seq_data_city2], [city1, city2]):
    X = [int(x['date']) for x in seq_data]
    y = [x['value'] for x in seq_data]
    slope, _, _, _, _ = stats.linregress(X, y)
    slope_values[city] = slope
print('Slope values:')
print(slope_values)

##### city with higher rate of growth
city_higher_rate = max(slope_values, key=slope_values.get)
natural_language_answer = f'The rate of growth in the prevalence of arthritis is higher in {city_higher_rate}'
print(natural_language_answer)
#</Analysis>
