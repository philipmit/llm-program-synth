#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2018, was the prevalence of poor mental health in Henderson higher or lower than in Santa Ana?'
variable_text='the prevalence of poor mental health'
time='2018'
city1='Henderson'
city2='Santa Ana'


##### collect data from Data Commons
import requests
import json
def fetch_data_from_data_commons(city):
    query=variable_text+' in '+city
    url = f"https://datacommons.org/api/explore/detect?q={query}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contextHistory": [],
        "dc": ""
    }
    response = requests.post(url, headers=headers, json=data)
    res_data = json.loads(response.text)
    entity = res_data['entities'][0]
    variable = res_data['variables'][0]
    url = "https://api.datacommons.org/v2/observation"
    params = {
    "key": API_KEY,
    "entity.dcids": entity, # e.g. "country/USA",
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    return json.loads(response.text)

print('Fetching data for city 1')
data1 = fetch_data_from_data_commons(city1)
print('Fetching data for city 2')
data2 = fetch_data_from_data_commons(city2)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis')
##### extract the data from the response
def extract_data(data, city):
    obs_data = data
    entity = list(obs_data["byVariable"].keys())[0]
    variable = list(obs_data["byVariable"][entity]["byEntity"].keys())[0]
    entity_data = obs_data["byVariable"][entity]["byEntity"][variable]
    seq_data = entity_data["orderedFacets"][0]['observations']
    seq_data_in_time=[x for x in seq_data if int(x['date']) == int(time)]
    return seq_data_in_time[0]['value'] if seq_data_in_time else None

value1 = extract_data(data1, city1)
print(f'value for {city1} is {value1}')

value2 = extract_data(data2, city2)
print(f'value for {city2} is {value2}')
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### compare the values for the two cities
if value1 is None or value2 is None:
    natural_language_answer='Data not available for comparison.'
elif value1 > value2:
    natural_language_answer=f'The {variable_text} in {city1} was higher than in {city2}.'
else:
    natural_language_answer=f'The {variable_text} in {city1} was lower than in {city2}.'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt

print('********** Create visualization that demonstrates the answer to the question in the prompt')

cities = [city1, city2]
values = [value1, value2]

plt.figure(figsize=(6, 6))
plt.bar(cities, values, color=['blue', 'green'])
plt.title(question + '\n' + 'Answer: ' + natural_language_answer)
plt.xlabel('Cities')
plt.ylabel('Prevalence of Poor Mental Health')
plt.ylim([0, max(values)+5])
plt.show()
#</Visualize>
