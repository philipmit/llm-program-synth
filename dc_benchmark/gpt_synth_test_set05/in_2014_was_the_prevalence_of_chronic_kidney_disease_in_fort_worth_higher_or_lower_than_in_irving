#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2014, was the prevalence of chronic kidney disease in Fort Worth higher or lower than in Irving?'
variable_text='the prevalence of chronic kidney disease'
time='2014'
city1='Fort Worth'
city2='Irving'

##### collect data from Data Commons for city1
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, # e.g. "country/USA",
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response1 = requests.get(url, params=params)
print('response.text for '+city1)
print(response1.text)

##### collect data from Data Commons for city2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": entity2, # e.g. "country/USA",
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response2 = requests.get(url, params=params)
print('response.text for '+city2)
print(response2.text)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data1 = json.loads(response1.text)
print('obs_data for '+city1)
print(obs_data1)
entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
print('entity_data for '+city1)
print(entity_data1)
print('type(entity_data1)')
print(type(entity_data1))
seq_data1 = entity_data1["orderedFacets"][0]['observations']
print('seq_data for '+city1)
print(seq_data1)
print('type(seq_data1)')
print(type(seq_data1))
print('len(seq_data1)')
print(len(seq_data1))

obs_data2 = json.loads(response2.text)
print('obs_data for '+city2)
print(obs_data2)
entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
print('entity_data for '+city2)
print(entity_data2)
print('type(entity_data2)')
print(type(entity_data2))
seq_data2 = entity_data2["orderedFacets"][0]['observations']
print('seq_data for '+city2)
print(seq_data2)
print('type(seq_data2)')
print(type(seq_data2))
print('len(seq_data2)')
print(len(seq_data2))
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the year specified in the prompt
seq_data1_in_timeframe=[x for x in seq_data1 if int(x['date']) == int(time)]
print('seq_data_in_timeframe for '+city1)
print(seq_data1_in_timeframe)
print('len(seq_data_in_timeframe for '+city1+')')
print(len(seq_data1_in_timeframe))
seq_data2_in_timeframe=[x for x in seq_data2 if int(x['date']) == int(time)]
print('seq_data_in_timeframe for '+city2)
print(seq_data2_in_timeframe)
print('len(seq_data_in_timeframe for '+city2+')')
print(len(seq_data2_in_timeframe))

##### compare the data for the two cities
value_city1=seq_data1_in_timeframe[0]['value']
print('value for '+city1)
print(value_city1)
value_city2=seq_data2_in_timeframe[0]['value']
print('value for '+city2)
print(value_city2)

if value_city1>value_city2:
    natural_language_answer=city1+' had a higher '+variable_text+' than '+city2+' in '+time
elif value_city1<value_city2:
    natural_language_answer=city1+' had a lower '+variable_text+' than '+city2+' in '+time
else:
    natural_language_answer=city1+' and '+city2+' had the same '+variable_text+' in '+time
print(natural_language_answer)
#</Analysis>
#<Visualize>
print('********** Create visualization that demonstrates the answer to the question in the prompt')
import matplotlib.pyplot as plt
import numpy as np

# Plotting the data for city1
X1 = [int(x['date']) for x in seq_data1]
y1 = [x['value'] for x in seq_data1]
plt.plot(X1, y1, label=city1, color="blue")

# Plotting the data for city2
X2 = [int(x['date']) for x in seq_data2]
y2 = [x['value'] for x in seq_data2]
plt.plot(X2, y2, label=city2, color="green")

# Highlighting the year from the prompt
plt.axvline(x=int(time), color='r', linestyle='--', label="Year: "+time)

plt.title(question+'\n Answer: '+natural_language_answer)
plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.grid(True)
plt.show()
#</Visualize>
