#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Is the rate of arthritis among people in Austin or Miami growing more quickly?'
variable_text='the rate of arthritis among people'
city1='Austin'
city2='Miami'
time1='2016'
time2='2021'


##### collect data from Data Commons for both cities
import requests
import json
cities=[city1, city2]
variables=[]
entities=[]

for city in cities:
    query=variable_text+' in '+city
    url = f"https://datacommons.org/api/explore/detect?q={query}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contextHistory": [],
        "dc": ""
    }
    response = requests.post(url, headers=headers, json=data)
    res_data = json.loads(response.text)
    entities.append(res_data['entities'][0])
    variables.append(res_data['variables'][0])

print('entities')
print(entities)
print('variables')
print(variables)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### collect observations for each city
seq_datas=[]
for i in range(len(cities)):
    entity=entities[i]
    variable=variables[i]
    url = "https://api.datacommons.org/v2/observation"
    params = {
    "key": API_KEY,
    "entity.dcids": entity, # e.g. "country/USA",
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
    }
    response = requests.get(url, params=params)
    obs_data = json.loads(response.text)
    entity_data = obs_data["byVariable"][variable]["byEntity"][entity]
    seq_data = entity_data["orderedFacets"][0]['observations']
    seq_datas.append(seq_data)
print('seq_datas')
print(seq_datas)
print('type(seq_datas)')
print(type(seq_datas))
print('len(seq_datas)')
print(len(seq_datas))
#</PrepData>
#<Analysis>
from scipy import stats
import numpy as np
print('********** Perform the analysis to answer the question in the prompt')

##### extract data from the timeframe specified in the prompt and calculate slopes for each city
slopes=[]
for i in range(len(cities)):
    seq_data_in_timeframe=[x for x in seq_datas[i] if int(x['date']) >= int(time1) and int(x['date']) <= int(time2)]
    print(f'seq_data_in_timeframe for {cities[i]}')
    print(seq_data_in_timeframe)
    X=[int(x['date']) for x in seq_data_in_timeframe]
    print('X')
    print(X)
    y=[x['value'] for x in seq_data_in_timeframe]
    print('y')
    print(y)
    slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)
    print('slope')
    print(slope)
    slopes.append(slope)

##### the city with the higher slope has the more quickly growing rate of arthritis
if slopes[0]>slopes[1]:
    natural_language_answer=city1
else:
    natural_language_answer=city2
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
print('********** Create visualization that demonstrates the answer to the question in the prompt')
#plt.figure(figsize=(10, 6))
for i in range(len(cities)):
    seq_data_in_timeframe=[x for x in seq_datas[i] if int(x['date']) >= int(time1) and int(x['date']) <= int(time2)]
    X=[int(x['date']) for x in seq_data_in_timeframe]
    y=[x['value'] for x in seq_data_in_timeframe]
    plt.scatter(X, y, label=cities[i].capitalize(), alpha=0.5)
    plt.plot(X, intercept + slopes[i] * np.array(X), label=f"Trend line for {cities[i]}")

plt.title(question+'\nAnswer: '+natural_language_answer)
plt.xlabel("Year")
plt.ylabel(variable_text.capitalize())
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
#</Visualize>
