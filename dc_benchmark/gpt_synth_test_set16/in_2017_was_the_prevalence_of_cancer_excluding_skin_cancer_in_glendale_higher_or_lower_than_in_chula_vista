#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2017, was the prevalence of cancer, excluding skin cancer, in Glendale higher or lower than in Chula Vista?'
variable_text='the prevalence of cancer, excluding skin cancer'
time='2017'
city1='Glendale'
city2='Chula Vista'


##### collect data from Data Commons for city1
import requests
import json
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
    "key": API_KEY,
    "entity.dcids": entity1, 
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
}
response = requests.get(url, params=params)
obs_data1 = json.loads(response.text)

##### collect data from Data Commons for city2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
params = {
    "key": API_KEY,
    "entity.dcids": entity2,
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
}
response = requests.get(url, params=params)
if response.status_code == 200:
    obs_data2 = json.loads(response.text)
else:
    obs_data2 = None
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response for city1
entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
seq_data1 = entity_data1["orderedFacets"][0]['observations']

##### extract the data from the response for city2
if obs_data2:
    entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
    seq_data2 = entity_data2["orderedFacets"][0]['observations']
else:
    seq_data2 = []
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the timeframe specified in the prompt for city1
seq_data1_in_time=[x for x in seq_data1 if int(x['date']) == int(time)]
print('seq_data1_in_time')
print(seq_data1_in_time)
print('len(seq_data1_in_time)')
print(len(seq_data1_in_time))
value1=seq_data1_in_time[0]['value'] if len(seq_data1_in_time)>0 else None
print('value1')
print(value1)

##### extract data from the timeframe specified in the prompt for city2
seq_data2_in_time=[x for x in seq_data2 if int(x['date']) == int(time)]
print('seq_data2_in_time')
print(seq_data2_in_time)
print('len(seq_data2_in_time)')
print(len(seq_data2_in_time))
value2=seq_data2_in_time[0]['value'] if len(seq_data2_in_time)>0 else None
print('value2')
print(value2)

##### the answer options are 'higher' or 'lower'
if value1 is not None and value2 is not None:
    if value1>value2:
        natural_language_answer='higher'
    else:
        natural_language_answer='lower'
else:
    natural_language_answer='Data not available for comparison'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np
print('********** Create visualization that demonstrates the answer to the question in the prompt')
##### prepare data for visualization
cities = [city1, city2]
values = [value1 if value1 is not None else 0, value2 if value2 is not None else 0]
colors = ['navy' if value1 is not None else 'grey', 'darkred' if value2 is not None else 'grey']

##### create bar chart
plt.figure(figsize=(10, 6))
plt.bar(cities, values, color=colors)
plt.xlabel("City")
plt.ylabel(variable_text.capitalize())
plt.title(f"Comparison of {variable_text} in {city1} and {city2} in {time}")
plt.show()
#</Visualize>
