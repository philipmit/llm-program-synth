#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2016, was the prevalence of poor physical health in Orlando higher or lower than in Fort Wayne?'
variable_text='the prevalence of poor physical health'
time='2016'
city1='Orlando'
city2='Fort Wayne'

##### collect data from Data Commons for city1
import requests
import json

query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params = {
    "key": API_KEY,
    "entity.dcids": entity1, 
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
}
response1 = requests.get(url, params=params)
print('response.text for city1')
print(response1.text)

##### collect data from Data Commons for city2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity2 = res_data['entities'][0]
params = {
    "key": API_KEY,
    "entity.dcids": entity2, 
    "select": ["entity", "variable", "value", "date"],
    "variable.dcids": variable
}
response2 = requests.get(url, params=params)
print('response.text for city2')
print(response2.text)
#</PrevData>

#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response for city1
try:
    obs_data1 = json.loads(response1.text)
    entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
    seq_data1 = entity_data1["orderedFacets"][0]['observations']
except json.JSONDecodeError:
    print(f"No data available for {city1} in the given timeframe.")
    seq_data1 = []

##### extract the data from the response for city2

try:
    obs_data2 = json.loads(response2.text)
    entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
    seq_data2 = entity_data2["orderedFacets"][0]['observations']
except json.JSONDecodeError:
    print(f"No data available for {city2} in the given timeframe.")
    seq_data2 = []
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the specified time in the prompt for city1
seq_data1_in_time=[x for x in seq_data1 if x['date'] == time]
print('seq_data1_in_time')
print(seq_data1_in_time)
value1 = seq_data1_in_time[0]['value'] if seq_data1_in_time else None
print('value1')
print(value1)

##### extract data from the specified time in the prompt for city2
seq_data2_in_time=[x for x in seq_data2 if x['date'] == time]
print('seq_data2_in_time')
print(seq_data2_in_time)
value2 = seq_data2_in_time[0]['value'] if seq_data2_in_time else None
print('value2')
print(value2)

##### the answer options are 'higher' or 'lower'
if value1 is None or value2 is None:
    natural_language_answer = 'Data not available for comparison.'
elif value1 > value2:
    natural_language_answer = 'higher'
else:
    natural_language_answer = 'lower'
print(natural_language_answer)
#</Analysis>
