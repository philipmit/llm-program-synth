#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Is the rate of arthritis among people in Austin or Miami growing more quickly?'
variable_text='the rate of arthritis among people'
city1='Austin'
city2='Miami'


##### collect data from Data Commons
import requests
import json
query1=variable_text+' in '+city1
query2=variable_text+' in '+city2
url1 = f"https://datacommons.org/api/explore/detect?q={query1}"
url2 = f"https://datacommons.org/api/explore/detect?q={query2}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response1 = requests.post(url1, headers=headers, json=data)
response2 = requests.post(url2, headers=headers, json=data)
res_data1 = json.loads(response1.text)
res_data2 = json.loads(response2.text)
entity1 = res_data1['entities'][0]
entity2 = res_data2['entities'][0]
variable = res_data1['variables'][0]
url = "https://api.datacommons.org/v2/observation"
params1 = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
params2 = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response1 = requests.get(url, params=params1)
response2 = requests.get(url, params=params2)
print('response1.text')
print(response1.text)
print('response2.text')
print(response2.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data1 = json.loads(response1.text)
obs_data2 = json.loads(response2.text)
print('obs_data1')
print(obs_data1)
print('obs_data2')
print(obs_data2)
entity_data1 = obs_data1["byVariable"][variable]["byEntity"][entity1]
entity_data2 = obs_data2["byVariable"][variable]["byEntity"][entity2]
print('entity_data1')
print(entity_data1)
print('entity_data2')
print(entity_data2)
print('type(entity_data1)')
print(type(entity_data1))
print('type(entity_data2)')
print(type(entity_data2))
seq_data1 = entity_data1["orderedFacets"][0]['observations']
seq_data2 = entity_data2["orderedFacets"][0]['observations']
print('seq_data1')
print(seq_data1)
print('seq_data2')
print(seq_data2)
print('type(seq_data1)')
print(type(seq_data1))
print('type(seq_data2)')
print(type(seq_data2))
print('len(seq_data1)')
print(len(seq_data1))
print('len(seq_data2)')
print(len(seq_data2))
#</PrepData>
#<Analysis>
from scipy import stats
import numpy as np
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the timeframe specified in the prompt
X1=[int(x['date']) for x in seq_data1]
print('X1')
print(X1)
y1=[x['value'] for x in seq_data1]
print('y1')
print(y1)
slope1, intercept1, r_value1, p_value1, std_err1 = stats.linregress(X1, y1)
print('slope1')
print(slope1)

X2=[int(x['date']) for x in seq_data2]
print('X2')
print(X2)
y2=[x['value'] for x in seq_data2]
print('y2')
print(y2)
slope2, intercept2, r_value2, p_value2, std_err2 = stats.linregress(X2, y2)
print('slope2')
print(slope2)

##### the answer options are 'Austin' or 'Miami'
if slope1>slope2:
    natural_language_answer='Austin'
else:
    natural_language_answer='Miami'
print(natural_language_answer)
#</Analysis>
