#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='In 2018, was the prevalence of poor mental health in Henderson higher or lower than in Santa Ana?'
variable_text='the prevalence of poor mental health'
time='2018'
city1='Henderson'
city2='Santa Ana'


##### collect data from Data Commons
import requests
import json
query1=variable_text+' in '+city1
query2=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query1}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response1 = requests.post(url, headers=headers, json=data)
res_data1 = json.loads(response1.text)
entity1 = res_data1['entities'][0]
variable = res_data1['variables'][0]

url = f"https://datacommons.org/api/explore/detect?q={query2}"
response2 = requests.post(url, headers=headers, json=data)
res_data2 = json.loads(response2.text)
entity2 = res_data2['entities'][0]

url = "https://api.datacommons.org/v2/observation"
params = {
"key": API_KEY,
"entity.dcids": [entity1, entity2], # e.g. "country/USA",
"select": ["entity", "variable", "value", "date"],
"variable.dcids": variable
}
response = requests.get(url, params=params)
print('response.text')
print(response.text)
#</PrevData>
#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the response
obs_data = json.loads(response.text)
print('obs_data')
print(obs_data)
entity_data1 = obs_data["byVariable"][variable]["byEntity"][entity1]
entity_data2 = obs_data["byVariable"][variable]["byEntity"][entity2]
print('entity_data1')
print(entity_data1)
print('entity_data2')
print(entity_data2)
print('type(entity_data1)')
print(type(entity_data1))
print('type(entity_data2)')
print(type(entity_data2))
seq_data1 = entity_data1["orderedFacets"][0]['observations']
seq_data2 = entity_data2["orderedFacets"][0]['observations']
print('seq_data1')
print(seq_data1)
print('seq_data2')
print(seq_data2)
print('type(seq_data1)')
print(type(seq_data1))
print('type(seq_data2)')
print(type(seq_data2))
print('len(seq_data1)')
print(len(seq_data1))
print('len(seq_data2)')
print(len(seq_data2))
#</PrepData>
#<Analysis>
print('********** Perform the analysis to answer the question in the prompt')
##### extract data from the timeframe specified in the prompt
seq_data1_in_time=[x for x in seq_data1 if x['date'] == time]
seq_data2_in_time=[x for x in seq_data2 if x['date'] == time]
print('seq_data1_in_time')
print(seq_data1_in_time)
print('seq_data2_in_time')
print(seq_data2_in_time)
value1=seq_data1_in_time[0]['value']
value2=seq_data2_in_time[0]['value']
print('value1')
print(value1)
print('value2')
print(value2)
##### the answer options are 'higher' or 'lower'
if value1>value2:
    natural_language_answer='higher'
else:
    natural_language_answer='lower'
print(natural_language_answer)
#</Analysis>
#<Visualize>
import matplotlib.pyplot as plt
import numpy as np
print('********** Create visualization that demonstrates the answer to the question in the prompt')
plt.figure(figsize=(10, 6))
X = np.array([city1, city2])
y = np.array([value1, value2])
plt.bar(X, y, color=['navy', 'darkred'])
plt.xlabel("City")
plt.ylabel(variable_text.capitalize())
plt.title(f"{variable_text.capitalize()} in {city1} and {city2} in {time}")
plt.show()
#</Visualize>
