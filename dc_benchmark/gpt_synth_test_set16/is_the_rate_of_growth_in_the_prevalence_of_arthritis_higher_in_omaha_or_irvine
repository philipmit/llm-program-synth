#<PrevData>
print('********** Load and preview the dataset and datatypes')
##### define variables based on prompt
question='Is the rate of growth in the prevalence of arthritis higher in Omaha or Irvine?'
variable_text='the prevalence of arthritis'
city1='Omaha'
city2='Irvine'


##### collect data from Data Commons for city1
import requests
import json
query=variable_text+' in '+city1
url = f"https://datacommons.org/api/explore/detect?q={query}"
headers = {
    "Content-Type": "application/json"
}
data = {
    "contextHistory": [],
    "dc": ""
}
response = requests.post(url, headers=headers, json=data)
res_data = json.loads(response.text)
entity1 = res_data['entities'][0]
variable = res_data['variables'][0]
##### revision: correct get url and parameters for city1
url = "https://api.datacommons.org/v1/observation"
params = {
"key": API_KEY,
"entity.dcids": entity1, 
"select": ["entity", "variable", "value", "date"], 
"variable.dcids": variable
}
response = requests.get(url, params=params)
obs_data1 = json.loads(response.text)
print('obs_data1:')
print(obs_data1)
# handle absence of observations key in case of an error
observations1 = obs_data1.get("observations", [])
if not observations1: 
    print(f"No observations found for {city1}")


##### collect data from Data Commons for city2
query=variable_text+' in '+city2
url = f"https://datacommons.org/api/explore/detect?q={query}"
response = requests.post(url, headers=headers, json=data)
res_data = response.json()
entity2 = res_data['entities'][0]
url = "https://api.datacommons.org/v1/observation"
params = {
"key": API_KEY,
"entity.dcids": entity2, 
"select": ["entity", "variable", "value", "date"], 
"variable.dcids": variable
}
response = requests.get(url, params=params)
obs_data2 = response.json()
print('obs_data2:')
print(obs_data2)
observations2 = obs_data2.get("observations", [])
if not observations2: 
    print(f"No observations found for {city2}")
#</PrevData>


#<PrepData>
print('********** Prepare the dataset for analysis and visualization')
##### extract the data from the observations for city1
seq_data1 = sorted(observations1, key=lambda x: x['date']) if observations1 else []
print('seq_data1:')
print(seq_data1)

##### extract the data from the observations for city2
seq_data2 = sorted(observations2, key=lambda x: x['date']) if observations2 else []
print('seq_data2:')
print(seq_data2)
#</PrepData>
#<Analysis>
from scipy import stats
import numpy as np
print('********** Perform the analysis to answer the question in the prompt')

##### extract data for city1
X1, y1, slope1 = [], [], None
if seq_data1:
    X1 = [int(x['date']) for x in seq_data1]
    print('X1:')
    print(X1)
    y1 = [x['value'] for x in seq_data1]
    print('y1:')
    print(y1)
    if X1 and y1:
        slope1, intercept1, r_value1, p_value1, std_err1 = stats.linregress(X1, y1)
        print('slope1:')
        print(slope1)
    else:
        print(f"Incomplete data for {city1}")


##### extract data for city2
X2, y2, slope2 = [], [], None
if seq_data2:
    X2 = [int(x['date']) for x in seq_data2]
    print('X2:')
    print(X2)
    y2 = [x['value'] for x in seq_data2]
    print('y2:')
    print(y2)
    if X2 and y2:
        slope2, intercept2, r_value2, p_value2, std_err2 = stats.linregress(X2, y2)
        print('slope2:')
        print(slope2)
    else:
        print(f"Incomplete data for {city2}")


##### the answer options are city1 or city2
if slope1 and slope2:
    natural_language_answer = city1 if slope1 > slope2 else city2
elif slope2: 
    natural_language_answer = city2
elif slope1: 
    natural_language_answer = city1
else: 
    natural_language_answer = "Insufficient data for both cities."

print(natural_language_answer)
#</Analysis>
